import React, { useState, useRef, useEffect } from "react";
import postService from "../../services/postService";
import post_reportService from "../../services/post_reportServices";
import authApi from "../../services/usersServices";
import ConfirmModal from "../common/ConfirmModal"; // ‚úÖ import modal x√°c nh·∫≠n

export default function PostOptionsMenu({ postId, ownerId, onDeleted }) {
  const [open, setOpen] = useState(false);
  const [message, setMessage] = useState(null);
  const [isReported, setIsReported] = useState(false);
  const [canDelete, setCanDelete] = useState(false);
  const [checking, setChecking] = useState(true);
  const [showConfirm, setShowConfirm] = useState(false);
  const [deleting, setDeleting] = useState(false);
  const ref = useRef(null);

  // ===== Helpers =====
  const pickMeUserId = (meRes) =>
    meRes?.user?.user_id ??
    meRes?.user_id ??
    meRes?.data?.user?.user_id ??
    meRes?.data?.user_id ??
    null;

  const pickPostOwnerId = (postRes) =>
    postRes?.user_id ??
    postRes?.data?.user_id ??
    postRes?.post?.user_id ??
    postRes?.data?.post?.user_id ??
    null;

  // B·ªè d·∫•u ƒë·ªÉ so kh·ªõp ‚Äúx√≥a/xo√°‚Äù v√† c√°c bi·∫øn th·ªÉ
  const noAccent = (s) =>
    String(s || "")
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .toLowerCase()
      .trim();

  // ‚úÖ Gom t·∫•t c·∫£ tr∆∞·ªùng h·ª£p th√†nh c√¥ng c√≥ th·ªÉ c√≥ t·ª´ BE
  const isDeleteSuccess = (res) => {
    if (!res || typeof res !== "object") return false;

    // 1) C√°c c·ªù r√µ r√†ng
    if (res.success === true) return true;
    if (res.deleted === true || res.deleted === 1) return true;
    if (res.ok === true) return true;
    if (res.affected_rows > 0 || res.affected === 1) return true;

    // 2) Status ph·ªï bi·∫øn
    const status = String(res.status || res.data?.status || "").toLowerCase();
    if (["ok", "success", "deleted"].includes(status)) return true;

    // 3) Action ph·ªï bi·∫øn
    const action = String(res.action || res.data?.action || "").toLowerCase();
    if (["deleted", "remove", "removed"].includes(action)) return true;

    // 4) Message ch·ª©a c·ª•m th√†nh c√¥ng (kh√¥ng ph√¢n bi·ªát d·∫•u)
    const msgRaw = res.message || res.data?.message || "";
    const msg = noAccent(msgRaw);
    if (
      /da xoa|xoa thanh cong|deleted|remove success/.test(msg)
    ) {
      return true;
    }

    // 5) M·ªôt s·ªë BE tr·∫£ { code: 200 }
    if (Number(res.code) === 200) return true;

    return false;
  };

  // ===== Close menu on outside click =====
  useEffect(() => {
    const onDocClick = (e) => {
      if (ref.current && !ref.current.contains(e.target)) setOpen(false);
    };
    document.addEventListener("mousedown", onDocClick);
    return () => document.removeEventListener("mousedown", onDocClick);
  }, []);

  // ===== Check delete permission =====
  useEffect(() => {
    let mounted = true;
    async function run() {
      if (!postId) {
        mounted && setCanDelete(false);
        mounted && setChecking(false);
        return;
      }
      setChecking(true);
      try {
        const meRes = await authApi.me().catch(() => null);
        const meId = pickMeUserId(meRes);
        let owner = ownerId ?? null;
        if (owner == null) {
          const postRes = await postService.getByIdCompact(postId).catch(() => null);
          owner = pickPostOwnerId(postRes);
        }
        const ok = !!meId && !!owner && String(meId) === String(owner);
        if (mounted) setCanDelete(ok);
      } catch {
        if (mounted) setCanDelete(false);
      } finally {
        if (mounted) setChecking(false);
      }
    }
    run();
    return () => { mounted = false; };
  }, [postId, ownerId]);

  const showMessage = (type, text) => {
    setMessage({ type, text });
    setTimeout(() => setMessage(null), 3000);
  };

  const handleDownload = async () => {
    if (!postId) {
      showMessage("error", "‚ùå Kh√¥ng c√≥ postId ƒë·ªÉ t·∫£i!");
      return;
    }
    try {
      await postService.download(postId);
      showMessage("success", "‚úÖ T·∫£i t√†i li·ªáu th√†nh c√¥ng.");
    } catch (err) {
      console.error("‚ùå T·∫£i th·∫•t b·∫°i:", err);
      const msg = err?.message || "";
      if (msg.includes("401")) {
        showMessage("warning", "‚ö†Ô∏è B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫£i t√†i li·ªáu.");
      } else if (msg.includes("403")) {
        showMessage("error", "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫£i t√†i li·ªáu n√†y.");
      } else if (msg.includes("404")) {
        showMessage("error", "‚ùå File kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã xo√°.");
      } else if (msg.toLowerCase().includes("failed to fetch")) {
        showMessage("error", "‚ö†Ô∏è L·ªói m·∫°ng ho·∫∑c CORS, kh√¥ng th·ªÉ t·∫£i.");
      } else {
        showMessage("error", `‚ùå T·∫£i th·∫•t b·∫°i: ${msg || "C√≥ l·ªói x·∫£y ra."}`);
      }
    }
  };

  const handleReport = async () => {
    if (!postId) {
      showMessage("error", "‚ùå Kh√¥ng c√≥ postId ƒë·ªÉ report!");
      return;
    }
    try {
      const res = await post_reportService.toggle(postId, "N·ªôi dung kh√¥ng ph√π h·ª£p");
      if (res?.status === "success") {
        if (res.data?.action === "created") {
          setIsReported(true);
          showMessage("success", "‚úÖ Report th√†nh c√¥ng.");
        } else if (res.data?.action === "deleted") {
          setIsReported(false);
          showMessage("warning", "üóëÔ∏è B·∫°n ƒë√£ g·ª° report.");
        } else {
          showMessage("success", "‚úÖ Report x·ª≠ l√Ω xong.");
        }
      } else {
        showMessage("error", `‚ùå L·ªói report: ${res?.error || "Kh√¥ng r√µ"}`);
      }
    } catch (err) {
      console.error("‚ùå Report th·∫•t b·∫°i:", err);
      const msg = err?.message || "C√≥ l·ªói x·∫£y ra.";
      if (msg.includes("401")) {
        showMessage("warning", "‚ö†Ô∏è B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ report.");
      } else {
        showMessage("error", `‚ùå Report th·∫•t b·∫°i: ${msg}`);
      }
    }
  };

  // ===== Modal toggle =====
  const confirmDelete = () => {
    setOpen(false);
    setShowConfirm(true);
  };

  // ===== Do delete after confirm =====
  const handleDelete = async () => {
    if (!postId || deleting) return;
    setDeleting(true);
    try {
      let res;
      try {
        res = await postService.removeViaPost(postId);
      } catch {
        res = await postService.remove(postId);
      }

      // Log ƒë·ªÉ b·∫°n ki·ªÉm tra th·ª±c t·∫ø (c√≥ th·ªÉ gi·ªØ l·∫°i l√∫c debug)
      console.debug("[Delete response]", res);

      if (isDeleteSuccess(res)) {
        setShowConfirm(false);
        showMessage("success", "üóëÔ∏è Xo√° b√†i vi·∫øt th√†nh c√¥ng.");
        if (typeof onDeleted === "function") onDeleted(postId); // c·∫≠p nh·∫≠t UI ngay
        return;
      }

      // Kh√¥ng match ‚Üí show th√¥ng ƒëi·ªáp chi ti·∫øt nh·∫•t c√≥ th·ªÉ
      const errMsg =
        res?.message ||
        res?.error ||
        res?.data?.message ||
        res?.data?.error ||
        "Kh√¥ng r√µ l·ªói";
      showMessage("error", `‚ùå Xo√° th·∫•t b·∫°i: ${errMsg}`);
    } catch (err) {
      console.error("‚ùå L·ªói xo√°:", err);
      const msg = err?.message || "";
      if (msg.includes("401")) {
        showMessage("warning", "‚ö†Ô∏è B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xo√° b√†i vi·∫øt.");
      } else if (msg.includes("403")) {
        showMessage("error", "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn xo√° b√†i vi·∫øt n√†y.");
      } else if (msg.includes("404")) {
        showMessage("error", "‚ùå B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã xo√°.");
      } else if (/^405|method not allowed/i.test(msg)) {
        showMessage("error", "‚ùå BE y√™u c·∫ßu ph∆∞∆°ng th·ª©c ƒë√∫ng (th·ª≠ POST).");
      } else {
        showMessage("error", `‚ùå Xo√° th·∫•t b·∫°i: ${msg || "C√≥ l·ªói x·∫£y ra."}`);
      }
    } finally {
      setDeleting(false);
    }
  };

  const downloadTailClass = !canDelete ? "rounded-b-lg" : "";

  return (
    <div className="relative" ref={ref}>
      <button
        className="text-gray-400 hover:text-white"
        aria-label="more options"
        onClick={() => setOpen((v) => !v)}
        disabled={checking && !open}
      >
        <i className="fa-solid fa-ellipsis-vertical"></i>
      </button>

      {open && (
        <div className="absolute right-0 mt-2 w-44 bg-[#1C2028] border border-gray-700 rounded-lg shadow-lg z-50">
          {/* Report */}
          <button
            onClick={() => {
              setOpen(false);
              handleReport();
            }}
            className={`flex items-center gap-2 w-full px-3 py-2 text-left text-sm hover:bg-gray-700/40 
              ${isReported ? "text-yellow-300" : "text-gray-300"} 
              rounded-t-lg`}
          >
            <i className={`fa-regular fa-flag ${isReported ? "text-yellow-400" : "text-red-400"}`}></i>
            {isReported ? "Unreport" : "Report"}
          </button>

          {/* Download */}
          <button
            onClick={async () => {
              setOpen(false);
              await handleDownload();
            }}
            className={`flex items-center gap-2 w-full px-3 py-2 text-left text-sm text-gray-300 hover:bg-gray-700/40 ${downloadTailClass}`}
          >
            <i className="fa-solid fa-download text-blue-400"></i>
            T·∫£i t√†i li·ªáu
          </button>

          {/* Delete (ch·ªâ hi·ªán n·∫øu c√≥ quy·ªÅn) */}
          {canDelete && (
            <button
              onClick={confirmDelete}
              className="flex items-center gap-2 w-full px-3 py-2 text-left text-sm text-red-400 hover:bg-gray-700/40 rounded-b-lg"
            >
              <i className="fa-solid fa-trash-can text-red-500"></i>
              X√≥a b√†i vi·∫øt
            </button>
          )}
        </div>
      )}

      {/* Toast */}
      {message && (
        <div
          className={`fixed bottom-6 right-6 px-4 py-2 rounded-lg shadow-lg text-sm transition
            ${message.type === "success" ? "bg-green-600 text-white" : ""}
            ${message.type === "error" ? "bg-red-600 text-white" : ""}
            ${message.type === "warning" ? "bg-yellow-500 text-black" : ""}
          `}
        >
          {message.text}
        </div>
      )}

      {/* Modal x√°c nh·∫≠n xo√° */}
      <ConfirmModal
        open={showConfirm}
        message="B·∫°n c√≥ ch·∫Øc mu·ªën xo√° b√†i vi·∫øt n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c."
        onClose={() => setShowConfirm(false)}
        onConfirm={handleDelete}
      />
    </div>
  );
}
